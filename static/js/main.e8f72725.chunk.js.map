{"version":3,"sources":["config.tsx","lib/calculateRewards.ts","hooks/usePolkadotJs.tsx","hooks/useLatestBlockHeight.tsx","hooks/useAccounts.tsx","hooks/useAccountData.tsx","hooks/useInitialData.tsx","hooks/useSiblingData.tsx","lib/utils.tsx","components/AccountBar/AccountBar.tsx","containers/Dashboard/hooks/useHandleCrowdloanContribute.tsx","components/AccountBar/ContributionForm.tsx","containers/Dashboard/Dashboard.tsx","containers/Dashboard/hooks/useActiveAccount.tsx","lib/apollo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","processorUrl","nodeUrl","oracle","dotToUSD","hdxToUSD","BigNumber","dividedBy","ownParaId","incentive","opportunityCost","reimbursmentRange","from","to","leadPercentageCliff","defaultDillutionMultiplier","minimalDillutionMultiplier","allocatedHDXSupply","multipliedBy","pow","toFixed","reimbursmentMultiplierScale","simpleLinearScale","calculateReimbursmentMultiplier","leadPercentageRate","plus","minus","calculateContributionReward","contributionAmount","reimbursmentMultiplier","opportunityCostUSD","reimbursedOpportunityCostUSD","rewardHDXAmount","log","debug","calculateDillutedContributionReward","contributionReward","dillutionMultiplier","calculateCurrentContributionReward","calculateCurrentDillutedContributionReward","totalRewardsDistributed","gt","calculateDillutionMultiplier","toString","calculateMinimalDillutedContributionReward","PolkadotJsProvider","usePolkadotJsContext","constate","api","setApi","useState","useEffect","wsProvider","WsProvider","ApiPromise","create","provider","useLatestBlockHeight","blockHeight","setBlockHeight","rpc","chain","subscribeNewHeads","header","number","LatestBlockHeightProvider","useLatestBlockHeightContext","AccountsProvider","useAccountsContext","activeAccountAddress","setActiveAccountAddress","useLocalStorage","allAccounts","setAllAccounts","loading","setLoading","latestBlockHeight","initiallyLoaded","setInitiallyLoaded","getAllAccounts","useCallback","web3Enable","accounts","web3Accounts","map","account","address","encodeAddress","decodeAddress","name","meta","accountsWithBalances","query","system","multi","accountInfo","i","balance","data","free","setLevel","ACCOUNT_DATA_QUERY","gql","INITIAL_DATA_QUERY","SIBLING_DATA_QUERY","fromE10Precision","value","AccountBar","activeAccountLoading","chainBlockHeight","processorBlockHeight","apiReady","showAccountSelector","setShowAccountSelector","accountSelectorRef","useRef","console","useClickAway","handleSelectActiveAccount","className","ref","length","onClick","_","millify","parseFloat","ContributionStatus","useHandleCrowdloanContribute","contributionStatus","setContributionStatus","NOT_SENT","handleCrowdloanContribute","formFields","LOADING","signer","web3FromAddress","tx","crowdloan","contribute","amount","signAndSend","status","events","isInBlock","isFinalized","filter","event","ExtrinsicFailed","is","FAILED","SUCCESSFUL","e","error","currencyMask","createNumberMask","prefix","suffix","includeThousandsSeparator","thousandsSeparatorSymbol","allowDecimal","decimalSymbol","decimalLimit","integerLimit","allowNegative","allowLeadingZeroes","ContributionForm","totalContributionAmount","totalRewards","onContribute","activeAccount","form","useForm","contributionRewards","setContributionRewards","current","minimal","watchAmount","watch","toNumber","handleSubmit","totalMinimalRewards","onSubmit","control","rules","validate","replaceAll","render","field","mask","autoComplete","placeholder","disabled","onChange","target","trigger","type","formState","errors","Dashboard","useMemo","find","useActiveAccount","accountsLoading","accountsInitiallyLoaded","initialDataLoading","ownParachain","fetchInitialData","networkStatus","refetch","useLazyQuery","notifyOnNetworkStatusChange","variables","nextFetchPolicy","useInitialData","accountDataLoading","contributions","accountTotalRewards","accountTotalContribution","fetchAccountData","accountId","reduce","contribution","totalDillutedRewards","totalContribution","params","useAccountData","siblingDataLoading","siblingParachain","siblingParaId","fetchSiblingData","useSiblingData","id","calculateTargetPercentage","fundsPledged","href","rel","style","height","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","logLevel","URL","document","location","searchParams","get","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8f72725.chunk.js","sourcesContent":["import BigNumber from \"bignumber.js\";\n\nconst config = {\n\n    // processorUrl: 'http://localhost:4000/graphql',\n    // processorUrl: 'http://f083-188-167-250-132.ngrok.io/graphql',\n    processorUrl: 'https://api-crowdloan.hydradx.io/graphql',\n    nodeUrl: 'wss://polka-arch-02.hydration.cloud',\n\n    oracle: {\n        dotToUSD: '25',\n        // HDX price after trippling\n        hdxToUSD: new BigNumber('0.08059').dividedBy('3'),\n    },\n    // TODO: don't forget to update this to hydra\n    ownParaId: '2034',\n    incentive: {\n        // compounded 14% APY\n        opportunityCost: '0.2996',\n        reimbursmentRange: {\n            // the incentive scheme is actually 100%-10%,\n            // its reversed here for the sake of the linear scale\n            from: 0.1,\n            to: 1\n        },\n        leadPercentageCliff: {\n            from: 15,\n            to: 25,\n        },\n        // by default no dillution is applied, the multiplier is '1'\n        defaultDillutionMultiplier: '1',\n        // TODO: can this have more precision if we calculate it on the spot using BigNumber? (probably not)\n        minimalDillutionMultiplier: '0.4483199822',\n        allocatedHDXSupply: new BigNumber('1000000000').multipliedBy(\n            new BigNumber(10).pow(12)\n        ).toFixed(0)\n    }\n};\n\nexport default config;\n","import BigNumber from 'bignumber.js';\nimport log from 'loglevel';\nimport simpleLinearScale from 'simple-linear-scale';\nimport config from './../config';\n\n/**\n * This file contains the Hydra crowdloan incentive implementation,\n * with math based on the following specification:\n * https://gist.github.com/maht0rz/737e2119bd3bfd2d89ffb66130038d72\n */\n\n/**\n * TL;DR on how to use those math functions\n * \n * leadPercentageRate: 25%\n * contributionAmount: 1DOT\n * totalRewardsDistributed: 0\n * \n * current rewards:\n * for each contribution calculate the following\n * contributionReward: calculateCurrentContributionReward <-- leadPercentageRate (at contribution blockHeight), contributionAmount\n * \n * for a sum of contributionReward(s) from all contributions, calculate the following:\n * dillutedContributionReward: calculateCurrentDillutedContributionReward <-- contributionReward, totalRewardsDistributed\n * ^ this will calculate the dillutionMultiplier and apply it on the contributionReward\n * \n * minimal rewards:\n * for each contribution calculate the following\n * contributionReward: -||-\n * dillutedContributionReward: calculateMinimalDillutedContributionReward <-- contributionReward\n * \n * for dynamic (from contribution form) reward calculation, use the same as above, but only for the contribution\n * values provided within the form\n */\n\nconst reimbursmentMultiplierScale = simpleLinearScale(\n    [\n        config.incentive.leadPercentageCliff.from,\n        config.incentive.leadPercentageCliff.to,\n    ],\n    [\n        config.incentive.reimbursmentRange.from,\n        config.incentive.reimbursmentRange.to,\n    ],\n    true\n);\n\n// had to reverse the calculation using the minus approach due to the linear scale\n// not calculating the scale within the bounds properly if either the domain or the range were\n// numbers in the reverse direction (e.g. 15-25 / 100-10)\nexport const calculateReimbursmentMultiplier = (leadPercentageRate: number) => {\n    return new BigNumber(config.incentive.reimbursmentRange.from)\n        .plus(config.incentive.reimbursmentRange.to) // if the range is 10-100 then this will be 110\n        .minus(reimbursmentMultiplierScale(leadPercentageRate))\n}\n\n// given the totalRewardContributed, calculate the current dillutionMultiplier\nexport const calculateDillutionMultiplier = (totalRewardsDistributed: string) => {\n    // if the totalRewardsDistributed > allocatedHDXSupply, then the rewards need to be dilluted\n    const shouldDillute = new BigNumber(totalRewardsDistributed)\n        .gt(config.incentive.allocatedHDXSupply);\n\n    if (!shouldDillute) return new BigNumber(config.incentive.defaultDillutionMultiplier);\n\n    return new BigNumber(config.incentive.allocatedHDXSupply)\n        .dividedBy(totalRewardsDistributed);\n};\n\n// given the contributionAmount and the reimbursmentMultiplier, calculate the contributionReward in HDX\nexport const calculateContributionReward = ({\n    contributionAmount,\n    reimbursmentMultiplier\n}: {\n    contributionAmount: string,\n    reimbursmentMultiplier: BigNumber\n}) => {\n    const opportunityCostUSD = new BigNumber(contributionAmount)\n        .multipliedBy(config.oracle.dotToUSD)\n        .multipliedBy(config.incentive.opportunityCost);\n\n    const reimbursedOpportunityCostUSD = opportunityCostUSD\n        .multipliedBy(reimbursmentMultiplier);\n\n    const rewardHDXAmount = reimbursedOpportunityCostUSD\n        .dividedBy(config.oracle.hdxToUSD)\n\n    log.debug('calculateContributionReward', {\n        opportunityCostUSD: opportunityCostUSD.toFixed(3),\n        reimbursedOpportunityCostUSD: reimbursedOpportunityCostUSD.toFixed(3),\n        rewardHDXAmount: rewardHDXAmount.toFixed(3)\n    });\n\n    return rewardHDXAmount;\n};\n\nexport const calculateDillutedContributionReward = ({\n    contributionReward,\n    dillutionMultiplier\n}: {\n    contributionReward: BigNumber,\n    dillutionMultiplier: BigNumber\n}) => {\n    return contributionReward\n        .multipliedBy(dillutionMultiplier);\n};\n\n/**\n * Current\n */\n\n// given the contributionAmount and the leadPercentageRate\n// calculate the reimbursmentMultiplier and then the current contributionReward\nexport const calculateCurrentContributionReward = ({\n    contributionAmount,\n    leadPercentageRate,\n}: {\n    contributionAmount: string,\n    leadPercentageRate: number,\n})  => {\n    const reimbursmentMultiplier = calculateReimbursmentMultiplier(leadPercentageRate);\n    return calculateContributionReward({ contributionAmount, reimbursmentMultiplier });\n}\n\nexport const calculateMinimalContributionReward = (contributionAmount: string)  => {\n    const reimbursmentMultiplier = new BigNumber(config.incentive.reimbursmentRange.from);\n    return calculateContributionReward({ contributionAmount, reimbursmentMultiplier });\n}\n\n/**\n * Dilluted current & minimal contribution rewards\n */\n\nexport const calculateCurrentDillutedContributionReward = ({\n    contributionReward,\n    totalRewardsDistributed,\n}: {\n    contributionReward: BigNumber,\n    totalRewardsDistributed: string,\n}) => {\n    const dillutionMultiplier = calculateDillutionMultiplier(totalRewardsDistributed);\n    log.debug('calculateCurrentDillutedContributionReward', 'dillutionMultiplier', dillutionMultiplier.toString());\n    return calculateDillutedContributionReward({\n        contributionReward,\n        dillutionMultiplier\n    });\n};\n\nexport const calculateMinimalDillutedContributionReward = (contributionReward: BigNumber) => {\n    const dillutionMultiplier = new BigNumber(config.incentive.minimalDillutionMultiplier);\n    return calculateDillutedContributionReward({\n        contributionReward,\n        dillutionMultiplier\n    })\n}","import { ApiPromise, WsProvider } from '@polkadot/api';\nimport { useEffect, useState } from 'react';\nimport config from 'src/config';\nimport constate from 'constate';\n\nexport const usePolkadotJs = () => {\n    const [api, setApi] = useState<ApiPromise | undefined>();\n\n    useEffect(() => {\n        (async () => {\n            const wsProvider = new WsProvider(config.nodeUrl);\n            const api = await ApiPromise.create({ provider: wsProvider });\n            setApi(api);\n        })()\n    }, [setApi]);\n\n    return api;\n}\n\nexport const [PolkadotJsProvider, usePolkadotJsContext] = constate(usePolkadotJs);","import constate from 'constate';\nimport { useEffect, useState } from 'react';\nimport { usePolkadotJsContext } from './usePolkadotJs'\n\nexport const useLatestBlockHeight = () => {\n    const api = usePolkadotJsContext();\n    const [blockHeight, setBlockHeight] = useState<string | undefined>();\n\n    useEffect(() => {\n        api?.rpc.chain.subscribeNewHeads((header) => {\n            const blockHeight = header.number.toString();\n            setBlockHeight(blockHeight)\n        });\n    }, [api]);\n\n    return blockHeight;\n}\n\nexport const [LatestBlockHeightProvider, useLatestBlockHeightContext] = constate(useLatestBlockHeight);","import { useCallback, useEffect, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport { web3Enable, web3Accounts } from '@polkadot/extension-dapp';\nimport { usePolkadotJsContext } from './usePolkadotJs';\nimport '@polkadot/api-augment';\nimport { useLatestBlockHeightContext } from './useLatestBlockHeight';\nimport constate from 'constate';\nimport { encodeAddress, decodeAddress } from '@polkadot/util-crypto';\n\nexport interface Account {\n    address: string,\n    name?: string,\n    balance: string\n}\n\nexport const useAccounts = () => {\n    const [activeAccountAddress, setActiveAccountAddress] = useLocalStorage<string | undefined>('hdx-crowdloan-account');\n    const [allAccounts, setAllAccounts] = useState<Account[]>([]);\n    const api = usePolkadotJsContext();\n    const [loading, setLoading] = useState(false);\n    const latestBlockHeight = useLatestBlockHeightContext();\n    const [initiallyLoaded, setInitiallyLoaded] = useState(false);\n\n    const getAllAccounts = useCallback(() => {\n        if (!api) return;\n\n        (async () => {\n            setLoading(true);\n            await web3Enable('hydra-crowdloan');\n            const accounts: Omit<Account, 'balance'>[] = (await web3Accounts())\n                .map((account) => {\n                    return {\n                        // TODO: what's the polkadot encoding?\n                        address: encodeAddress(decodeAddress(account.address), 0),\n                        name: account.meta.name,\n                    }\n                });\n\n            const accountsWithBalances: Account[] = (await api.query.system.account.multi(\n                accounts.map(account => account.address)\n            ))\n                .map((accountInfo, i) => ({\n                    ...accounts[i],\n                    balance: accountInfo.data.free.toString()\n                }))\n\n            setAllAccounts(accountsWithBalances);\n            setLoading(false);\n            setInitiallyLoaded(true);\n        })();\n    }, [setAllAccounts, setLoading, api, setInitiallyLoaded]);\n\n    // refetch active account balance with every new block, or when the active account changes\n    useEffect(() => {\n        // only do this in case there is an active account set\n        // this will trigger the extension connection popup as well if required\n        // this will refetch all the balances, but it will also refetch account names\n        activeAccountAddress && getAllAccounts();\n    }, [activeAccountAddress, getAllAccounts, latestBlockHeight]);\n    \n    return {\n        activeAccountAddress,\n        setActiveAccountAddress,\n        getAllAccounts,\n        allAccounts,\n        loading,\n        initiallyLoaded\n    }\n}\n\nexport const [AccountsProvider, useAccountsContext] = constate(useAccounts);","import { gql, useLazyQuery } from '@apollo/client'\nimport BigNumber from 'bignumber.js';\nimport log from 'loglevel';\nimport { useEffect, useMemo } from 'react';\nimport { calculateCurrentDillutedContributionReward, calculateMinimalDillutedContributionReward } from 'src/lib/calculateRewards';\nimport { useAccountsContext } from './useAccounts';\nimport { useLatestBlockHeight, useLatestBlockHeightContext } from './useLatestBlockHeight';\n\nlog.setLevel('DEBUG');\n\nexport interface AccountDataQueryResponse {\n    contributions: {\n        balance: string,\n        contributionReward: string\n    }[]\n}\n\nexport const ACCOUNT_DATA_QUERY = gql`\n    query AccountData($accountId: String!) {\n        contributions(where: {account: {accountId_eq: $accountId}}){\n            balance\n            contributionReward\n        }\n    }\n`\nexport const useAccountData = (totalRewardsDistributed?: string) => {\n    const { activeAccountAddress } = useAccountsContext();\n    const blockHeight = useLatestBlockHeightContext()\n\n    const [fetchAccountData, { data, loading, networkStatus, refetch }] = useLazyQuery<AccountDataQueryResponse>(\n        ACCOUNT_DATA_QUERY,\n        { \n            notifyOnNetworkStatusChange: true,\n            nextFetchPolicy: 'no-cache',\n            variables: {\n                accountId: activeAccountAddress\n            }\n        }\n    );\n    const accountTotalRewards = useMemo(() => {\n        if (!totalRewardsDistributed || !data) return;\n\n        const totalRewards = data.contributions?.reduce((totalRewards, contribution) => (\n            totalRewards.plus(contribution.contributionReward)\n        ), new BigNumber(0)); // TODO: this is dangerous\n\n        if (!totalRewards) return;\n\n        const rewards = {\n            totalDillutedRewards: calculateCurrentDillutedContributionReward({\n                contributionReward: new BigNumber(totalRewards.toString()),\n                totalRewardsDistributed\n            }),\n            totalMinimalRewards: calculateMinimalDillutedContributionReward(totalRewards)\n        };\n\n        return rewards;\n    }, [data, totalRewardsDistributed]);\n\n    const accountTotalContribution = useMemo(() => {\n        return data?.contributions?.reduce((totalContribution, contribution) => {\n            return totalContribution.plus(contribution.balance)\n        }, new BigNumber(0));\n    }, [data]);\n\n    useEffect(() => {\n        if (!activeAccountAddress) return;\n        const params = {\n            variables: {\n                accountId: activeAccountAddress\n            }\n        };\n\n        console.log('active account address changed', params);\n\n        !refetch\n            ? fetchAccountData(params)\n            : refetch(params)\n    }, [activeAccountAddress, fetchAccountData, refetch, blockHeight]);\n\n    return {\n        ...data,\n        accountTotalRewards,\n        accountTotalContribution,\n        loading,\n        networkStatus\n    }\n}","import { gql, useLazyQuery } from '@apollo/client'\nimport { useEffect } from 'react';\nimport config from 'src/config';\nimport { useLatestBlockHeightContext } from './useLatestBlockHeight';\n\nexport interface InitialDataQueryResponse {\n    incentive?: {\n        totalRewardsDistributed: string,\n        leadPercentageRate: string,\n        blockHeight: string,\n        siblingParachain?: {\n            id?: string\n        }\n    },\n    ownParachain: {\n        fundsPledged: string,\n    }\n}\n\nexport const INITIAL_DATA_QUERY = gql`\n    query InitialData($ownParaId: ID!) {\n        incentive: incentiveById(id: \"incentive\") {\n            totalRewardsDistributed\n            leadPercentageRate\n            blockHeight,\n            siblingParachain {\n                id\n            }\n        }\n\n        # TODO: add fetching only of 3 days old data using the block height filter\n        ownParachain: parachainById(id: $ownParaId) {\n            fundsPledged,\n            # TODO: add createdAt for graph\n        }\n    }\n`\n\nexport const useInitialData = () => {\n    const latestBlockHeight = useLatestBlockHeightContext();\n    const [fetchInitialData, { data, loading, networkStatus, refetch }] = useLazyQuery<InitialDataQueryResponse>(\n        INITIAL_DATA_QUERY, \n        { \n            notifyOnNetworkStatusChange: true,\n            variables: {\n                ownParaId: config.ownParaId\n            },\n            nextFetchPolicy: 'no-cache'\n        }\n    );\n    \n    useEffect(() => {\n        console.log('refetching', latestBlockHeight);\n        if (!latestBlockHeight) return;\n        refetch ? refetch() : fetchInitialData();\n    }, [latestBlockHeight, fetchInitialData, refetch]);\n\n    return {\n        ...data,\n        loading,\n        networkStatus\n    }\n}","import { gql, useLazyQuery } from '@apollo/client'\nimport { useEffect } from 'react';\nimport { useLatestBlockHeightContext } from './useLatestBlockHeight'\n\nexport interface SiblingDataQueryResponse {\n    siblingParachain: {\n        fundsPledged: string,\n    }\n}\n\nexport const SIBLING_DATA_QUERY = gql`\n    query SiblingData($siblingParaId: ID!) {\n        # TODO: add fetching only of 3 days old data using the block height filter\n        siblingParachain: parachainById(id: $siblingParaId) {\n            fundsPledged,\n        }\n    }\n` \nexport const useSiblingData = (siblingParaId?: string) => {\n    const latestBlockHeight = useLatestBlockHeightContext();\n    const [fetchSiblingData, { data, loading, networkStatus }] = useLazyQuery<SiblingDataQueryResponse>(\n        SIBLING_DATA_QUERY,\n        { \n            notifyOnNetworkStatusChange: true,\n            nextFetchPolicy: 'no-cache'\n        },\n    );\n\n    useEffect(() => {\n        siblingParaId && fetchSiblingData({\n            variables: { siblingParaId }\n        });\n    }, [latestBlockHeight, fetchSiblingData, siblingParaId]);\n\n    return {\n        ...data,\n        loading,\n        networkStatus\n    }\n}","import BigNumber from 'bignumber.js';\nimport millify from 'millify';\n\nexport const fromE6Precision = (value: string) => (\n    new BigNumber(value)\n        .dividedBy(new BigNumber(10).pow(6))\n        .toFixed(0)\n)\n\nexport const toE10Precision = (value: string) => (\n    new BigNumber(value)\n        .multipliedBy(new BigNumber(10).pow(10))\n        .toFixed(0)\n)\n\nexport const fromE10Precision = (value: string) => (\n    new BigNumber(value)\n        .dividedBy(new BigNumber(10).pow(10))\n        .toFixed(10)\n)\n\nexport const fromE12Precision = (value: string) => (\n    new BigNumber(value)\n        .dividedBy(new BigNumber(10).pow(12))\n        .toFixed(12)\n)\n","import { useCallback, useEffect, useRef } from 'react';\nimport { Account } from 'src/hooks/useAccounts';\nimport { useClickAway } from 'react-use';\nimport './AccountBar.scss';\nimport { fromE10Precision } from 'src/lib/utils';\nimport millify from 'millify';\n\nexport interface AccountBarProps {\n    account?: Account,\n    activeAccountLoading: boolean,\n    initiallyLoaded: boolean,\n    apiReady: boolean, \n    accounts?: Account[],\n    getAllAccounts: () => void,\n    setActiveAccountAddress: (accountAddress: string) => void,\n    processorBlockHeight?: string,\n    chainBlockHeight?: string,\n    showAccountSelector: boolean,\n    setShowAccountSelector: (showAccountSelector: boolean) => void\n}\n\nexport const AccountBar = ({ \n    account, \n    activeAccountLoading,\n    initiallyLoaded,\n    accounts,\n    setActiveAccountAddress,\n    chainBlockHeight,\n    processorBlockHeight,\n    getAllAccounts,\n    apiReady,\n    showAccountSelector,\n    setShowAccountSelector\n}: AccountBarProps) => {\n    const accountSelectorRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (!showAccountSelector) return;\n        console.log('loading accounts');\n        getAllAccounts();\n    }, [showAccountSelector, getAllAccounts]);\n\n    useClickAway(accountSelectorRef, () => setShowAccountSelector(false));\n\n    const handleSelectActiveAccount = useCallback((account: Account) => {\n        setActiveAccountAddress(account.address);\n        setShowAccountSelector(false);\n    }, [setActiveAccountAddress, setShowAccountSelector]);\n\n    return <div className='accountSelector'>\n        <div\n            ref={accountSelectorRef} \n            className={'accountSelector__overlay' + (showAccountSelector ? '' : ' hidden')}>\n            {\n                accounts?.length\n                    ? (\n                        <div className='accountSelector__overlay__list'>\n                            {accounts.map((account, i) => (\n                                <div className='accountSelector__account'\n                                    key={i}\n                                    onClick={_ => handleSelectActiveAccount(account)}\n                                >\n                                    <div className='accountSelector__account__name'>{account.name}</div>|\n                                    <div className='accountSelector__account__balance'>{millify(parseFloat(fromE10Precision(account.balance)))} DOT</div>|\n                                    <div className='accountSelector__account__address'>{account.address}</div>\n                                </div>\n                            ))}\n                        </div>\n                    )\n                    : (\n                        <div className='accountSelector__overlay__list__empty'>\n                            No accounts available\n                        </div>\n                    )\n\n                \n            }\n        </div>\n        <div className='accountSelector__accountInfo'>\n            {/* <p>activeAccountLoading: {activeAccountLoading ? 'loading' : 'not loading'}</p>\n            <p>Initially loaded: {initiallyLoaded ? 'already loaded' : 'not yet'}</p> */}\n            {/* <div>{chainBlockHeight} / {processorBlockHeight}</div> */}\n            \n            <div className='accountSelector__account account_selector__accountInfo__info' onClick={_ => setShowAccountSelector(true)}>\n                [{!apiReady\n                    ? <div className='accountSelector__account__name'>Loading...</div>\n                    : (\n                        account\n                            ? (\n                                <>\n                                    <div className='accountSelector__account__name'>{account?.name}</div>|\n                                    <div className='accountSelector__account__balance'>{millify(parseFloat(fromE10Precision(account?.balance)))} DOT</div>|\n                                    <div className='accountSelector__account__address'>{account?.address}</div>\n                                </>\n                            )\n                            : 'Connect account'\n                    )\n            }]\n            </div>\n            \n        </div>\n    </div>\n}","import { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback, useState } from 'react'\nimport { FormFields } from 'src/components/AccountBar/ContributionForm';\nimport config from 'src/config';\nimport { useAccountsContext } from 'src/hooks/useAccounts';\nimport { usePolkadotJsContext } from 'src/hooks/usePolkadotJs';\nimport { toE10Precision } from 'src/lib/utils';\n\nexport enum ContributionStatus {\n    NOT_SENT,\n    LOADING,\n    SUCCESSFUL,\n    FAILED\n}\n\nexport const useHandleCrowdloanContribute = () => {\n    const api = usePolkadotJsContext();\n    const { activeAccountAddress } = useAccountsContext();\n    const [contributionStatus, setContributionStatus] = useState<ContributionStatus>(ContributionStatus.NOT_SENT);\n    const handleCrowdloanContribute =  useCallback((formFields: FormFields) => {\n        if (!api || !activeAccountAddress) return;\n\n        setContributionStatus(ContributionStatus.LOADING);\n        (async () => {\n            try {\n                const { signer } = await web3FromAddress(activeAccountAddress);\n\n                await api.tx.crowdloan.contribute(\n                    config.ownParaId,\n                    toE10Precision(formFields.amount),\n                    null\n                )\n                    .signAndSend(\n                        activeAccountAddress,\n                        { signer },\n                        ({ status, events }) => {\n                            if (status.isInBlock || status.isFinalized) {\n                                events\n                                    .filter(({ event }) => api.events.system.ExtrinsicFailed.is(event))\n                                    .length\n                                        ? setContributionStatus(ContributionStatus.FAILED)\n                                        : setContributionStatus(ContributionStatus.SUCCESSFUL)\n                            }\n                        }\n                    )\n            } catch (e) {\n                console.log('failed');\n                console.error('contribution failed', e);\n                setContributionStatus(ContributionStatus.FAILED)\n            }\n        })();\n    }, [api, activeAccountAddress]);\n\n    console.log('contributionStatus', contributionStatus);\n    return { handleCrowdloanContribute, contributionStatus }\n}","import BigNumber from 'bignumber.js';\nimport './ContributionForm.scss';\nimport { Controller, useForm } from 'react-hook-form'\nimport MaskedInput from 'react-text-mask';\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask'\nimport { Account } from 'src/hooks/useAccounts';\nimport { useCallback, useEffect, useState } from 'react';\nimport { ContributionStatus } from 'src/containers/Dashboard/hooks/useHandleCrowdloanContribute';\nimport { calculateCurrentContributionReward, calculateCurrentDillutedContributionReward, calculateDillutedContributionReward, calculateMinimalContributionReward, calculateMinimalDillutedContributionReward } from 'src/lib/calculateRewards';\nimport { watch } from 'fs';\nimport millify from 'millify';\nimport { fromE10Precision, fromE12Precision } from 'src/lib/utils';\n\nexport interface FormFields {\n    amount: string\n}\n\nexport interface ContributionFormProps {\n    totalContributionAmount?: BigNumber,\n    totalRewards?: {\n        totalDillutedRewards: BigNumber,\n        totalMinimalRewards: BigNumber\n    },\n    onContribute: (formFields: FormFields) => void,\n    apiReady: boolean,\n    activeAccount?: Account,\n    setShowAccountSelector: (showAccountSelector: boolean) => void,\n    contributionStatus: ContributionStatus,\n    incentive?: {\n        leadPercentageRate: string,\n        totalRewardsDistributed: string\n    }\n}\n\nexport const thousandsSeparatorSymbol = ' ';\nexport const currencyMask = createNumberMask({\n    prefix: '',\n    suffix: '',\n    includeThousandsSeparator: true,\n    thousandsSeparatorSymbol,\n    allowDecimal: true,\n    decimalSymbol: '.',\n    // TODO: adjust decimal limit dependin on the selected MetricUnit\n    decimalLimit: 3,\n    integerLimit: 10,\n    allowNegative: false,\n    allowLeadingZeroes: false,\n})\n\nexport const ContributionForm = ({\n    totalContributionAmount,\n    totalRewards,\n    onContribute,\n    apiReady,\n    activeAccount,\n    setShowAccountSelector,\n    contributionStatus,\n    incentive\n}: ContributionFormProps) => {\n    const form = useForm<FormFields>();\n    const [contributionRewards, setContributionRewards] = useState({\n        current: '0',\n        minimal: '0',\n    })\n\n    const watchAmount = form.watch('amount');\n\n    useEffect(() => {\n        if (!incentive) return;\n\n        setContributionRewards({\n            current: calculateCurrentDillutedContributionReward({\n                contributionReward: calculateCurrentContributionReward({\n                    contributionAmount: watchAmount || '0',\n                    leadPercentageRate: new BigNumber(incentive?.leadPercentageRate)\n                        .dividedBy(new BigNumber(10).pow(6))\n                        .toNumber()\n                }),\n                totalRewardsDistributed: incentive.totalRewardsDistributed\n            }).toFixed(6),\n            minimal: calculateMinimalDillutedContributionReward(\n                calculateCurrentContributionReward({\n                    contributionAmount: watchAmount || '0',\n                    leadPercentageRate: new BigNumber(incentive?.leadPercentageRate)\n                        .dividedBy(new BigNumber(10).pow(6))\n                        .toNumber()\n                })\n            ).toFixed(6)\n        })\n    }, [watchAmount, incentive]);\n\n    const handleSubmit = useCallback((formFields) => {\n        activeAccount \n            ? onContribute(formFields)\n            : setShowAccountSelector(true)\n    }, [activeAccount, setShowAccountSelector, onContribute]);\n\n    return <div className='contribute'>\n        <h2>Contribute</h2>\n        <div className='contribute__past'>\n            <div>Your contribution: {totalContributionAmount && millify(parseFloat(fromE10Precision(totalContributionAmount.toFixed(0))))} DOT</div>\n            {/* <div>Total rewards: {totalRewards?.totalDillutedRewards.toString()}</div> */}\n            <div>Your minimum rewards: {totalRewards?.totalMinimalRewards && millify(parseFloat(fromE12Precision(totalRewards?.totalMinimalRewards.toFixed(0))))} HDX</div>\n        </div>\n        \n        <div className='contribute__current'>\n            <div>Current rewards: {millify( parseFloat( contributionRewards.current))} HDX</div>\n            <div>Minimum rewards: {millify( parseFloat( contributionRewards.minimal))} HDX</div>\n        </div>\n\n        <div>\n            <form className='contribute__form' onSubmit={form.handleSubmit(handleSubmit)}>\n                {/* {form.formState.isDirty && form.formState.isValid ? 'valid' : 'not valid'} */}\n                <Controller \n                    control={form.control}\n                    name={'amount'}\n                    rules={{\n                        validate: value => (\n                            value && parseFloat(value.replaceAll(thousandsSeparatorSymbol, '')) >= 5\n                        )\n                    }}\n                    render={\n                        (({ field }) => (\n                            <MaskedInput \n                                mask={currencyMask}\n                                autoComplete='off'\n                                placeholder='100 000'\n                                disabled={true}\n                                {...field}\n                                onChange={event => {\n                                    const value = event.target.value.replaceAll(thousandsSeparatorSymbol, '');\n                                    field.onChange(value);\n                                    form.trigger('amount');\n                                }}\n                                \n                            />\n                        ))\n                    }\n                />\n\n                <button \n                    type='submit'\n                    disabled={true}>\n                    Crowdloan finished\n                </button>\n\n                <div className='status'>\n                    {(() => {\n                        return (\n                            form.formState.errors.amount \n                                ? <div className='status__info'>Minimal contribution is 5 DOT</div> \n                                : <></>\n                            )\n                    })()}\n                    {(() => {\n                        switch(contributionStatus){\n                            case ContributionStatus.FAILED:\n                                return <div className='status__error'>Contribution failed</div>\n                            case ContributionStatus.SUCCESSFUL:\n                                return <div className='status__info'>Contribution successful, your rewards are being processed and will show up momentarily.</div>\n                            case ContributionStatus.LOADING:\n                                return <div className='status__info'>Contribution loading</div>\n                            default:\n                                return '';\n                        }\n                    })()}\n                </div>\n            </form>\n        </div>\n    </div>\n}","import { useAccountData } from \"src/hooks/useAccountData\";\nimport { useAccountsContext } from \"src/hooks/useAccounts\";\nimport { useInitialData } from \"src/hooks/useInitialData\";\nimport { useLatestBlockHeight } from \"src/hooks/useLatestBlockHeight\";\nimport { useSiblingData } from \"src/hooks/useSiblingData\";\nimport { AccountBar } from \"src/components/AccountBar/AccountBar\";\nimport { useActiveAccount } from \"./hooks/useActiveAccount\";\nimport { usePolkadotJsContext } from \"src/hooks/usePolkadotJs\";\nimport { ContributionForm } from \"src/components/AccountBar/ContributionForm\";\nimport { useHandleCrowdloanContribute } from \"./hooks/useHandleCrowdloanContribute\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { calculateReimbursmentMultiplier } from \"src/lib/calculateRewards\";\nimport BigNumber from \"bignumber.js\";\n\nimport \"./Dashboard.scss\";\nimport { fromE10Precision } from \"src/lib/utils\";\nimport millify from \"millify\";\n\nexport const Dashboard = () => {\n  const blockHeight = useLatestBlockHeight();\n  const api = usePolkadotJsContext();\n\n  const {\n    activeAccount,\n    loading: activeAccountLoading,\n    setActiveAccountAddress,\n  } = useActiveAccount();\n\n  const {\n    getAllAccounts,\n    allAccounts,\n    loading: accountsLoading,\n    initiallyLoaded: accountsInitiallyLoaded,\n  } = useAccountsContext();\n\n  const {\n    loading: initialDataLoading,\n    incentive,\n    ownParachain,\n  } = useInitialData();\n\n  const {\n    loading: accountDataLoading,\n    contributions,\n    accountTotalRewards,\n    accountTotalContribution,\n  } = useAccountData(incentive?.totalRewardsDistributed);\n\n  const {\n    handleCrowdloanContribute,\n    contributionStatus,\n  } = useHandleCrowdloanContribute();\n\n  const [showAccountSelector, setShowAccountSelector] = useState(false);\n\n  const { loading: siblingDataLoading, siblingParachain } = useSiblingData(\n    incentive?.siblingParachain?.id\n  );\n\n  const reimbursmentMultiplier = useMemo(() => {\n    if (!incentive) return;\n    return calculateReimbursmentMultiplier(\n      new BigNumber(incentive?.leadPercentageRate)\n        .dividedBy(new BigNumber(10).pow(6))\n        .toNumber()\n    ).toFixed(2);\n  }, [incentive]);\n\n  const calculateTargetPercentage = useCallback(() => {\n    if (siblingParachain?.fundsPledged && ownParachain?.fundsPledged) {\n      return (\n        (100 / parseFloat(fromE10Precision(siblingParachain?.fundsPledged))) *\n        parseFloat(fromE10Precision(ownParachain?.fundsPledged))\n      ).toFixed(2);\n    } else return \"0\";\n  }, [siblingParachain?.fundsPledged, ownParachain?.fundsPledged]);\n\n  return (\n    <div className=\"screen\">\n      <div className=\"screen__navigation\">\n        <a href=\"https://hydradx.io\" rel=\"noreferrer\" target=\"_blank\">\n          <div className=\"hydraLogo screen__navigation__icon\"></div>\n          <h1>Home</h1>\n        </a>\n        <a\n          className=\"help\"\n          href=\"https://discord.gg/aQTtp8aRbk\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          Help\n        </a>\n        <a\n          className=\"help\"\n          href=\"https://docs.hydradx.io/hydradx_crowdloan\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          Docs\n        </a>\n      </div>\n\n      <div className=\"dashboard\">\n        <div className=\"dashboard__top\">\n          <AccountBar\n            account={activeAccount}\n            accounts={allAccounts}\n            getAllAccounts={getAllAccounts}\n            activeAccountLoading={activeAccountLoading}\n            initiallyLoaded={accountsInitiallyLoaded}\n            setActiveAccountAddress={setActiveAccountAddress}\n            chainBlockHeight={blockHeight}\n            processorBlockHeight={incentive?.blockHeight}\n            apiReady={!!api}\n            showAccountSelector={showAccountSelector}\n            setShowAccountSelector={setShowAccountSelector}\n          />\n        </div>\n\n        <div className=\"dashboard__bottom\">\n          {/* graph */}\n          <div className=\"dashboard__bottom__graph\">\n            <h2>Status</h2>\n            <div className=\"dashboard__botton__graph__status\">\n              {\" \"}\n              {/* {parseFloat(calculateTargetPercentage()) > 100\n                ? \"leading the race for the target auction by \" +\n                  (parseFloat(calculateTargetPercentage()) - 100).toFixed(0) +\n                  \"%. \" +\n                  (parseFloat(calculateTargetPercentage()) > 115\n                    ? \"You will receive \" +\n                      (100 * parseFloat(reimbursmentMultiplier || \"0.1 \") +\n                        \"% of rewards for your contributions at this moment\")\n                    : \"We didn't secure a safe lead yet, you will still receive the highest rewards at this moment!\")\n                : \"still catching up for the target auction. If you help us secure a slot, you will receive the highest rewards possible!\"} */}\n                We have won the race for our target auction, we are therefore not taking any more contributions. Thanks for all of your support!\n                <br/><br/>\n                Learn more {\" \"}\n                <a\n                    className='small-link'\n                    href=\"https://docs.hydradx.io/hydradx_crowdloan\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    {\" \"}\n                     here\n                  </a>.\n                <div className=\"small-link-wrapper\">\n                  \n                </div>\n            </div>\n            <div className=\"charts\">\n              <div className=\"target chart\">\n                <div\n                  style={{ height: (parseFloat(calculateTargetPercentage()) > 100 ? 100 : calculateTargetPercentage()) + \"%\" }}\n                  className=\"barChart\"\n                ></div>\n                <div className=\"barChartNumber\">\n                  {millify(\n                    parseFloat(\n                      fromE10Precision(ownParachain?.fundsPledged || \"0\")\n                    )\n                  )}{\" \"}\n                  /{\" \"}\n                  {millify(\n                    parseFloat(\n                      // fromE10Precision(siblingParachain?.fundsPledged || \"0\")\n                      // '1688307'\n                      '2100000'\n                    )\n                  )}{\" \"}\n                  DOT TARGET\n                </div>\n              </div>\n\n              {/* <div className=\"reward chart\">\n                <div\n                  style={{\n                    height:\n                      100 * parseFloat(reimbursmentMultiplier || \"0.1\") + \"%\",\n                  }}\n                  className=\"barChart\"\n                ></div>\n                <div className=\"barChartNumber\">\n                  {100 * parseFloat(reimbursmentMultiplier || \"0.1\") + \"%\"}{\" \"}\n                  REWARD\n                </div>\n              </div> */}\n            </div>\n          </div>\n          {/* form */}\n          <div className=\"dashboard__bottom__form\">\n            <ContributionForm\n              totalContributionAmount={accountTotalContribution}\n              totalRewards={accountTotalRewards}\n              onContribute={handleCrowdloanContribute}\n              apiReady={!!api}\n              activeAccount={activeAccount}\n              setShowAccountSelector={setShowAccountSelector}\n              contributionStatus={contributionStatus}\n              incentive={incentive}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { find } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { useAccountsContext } from 'src/hooks/useAccounts'\n\nexport const useActiveAccount = () => {\n    const { \n        activeAccountAddress, \n        allAccounts, \n        getAllAccounts,\n        loading,\n        setActiveAccountAddress\n    } = useAccountsContext();\n\n    useEffect(() => {\n        activeAccountAddress && getAllAccounts();\n    }, [activeAccountAddress, getAllAccounts]);\n\n    const activeAccount = useMemo(() => {\n        return find(allAccounts, { address: activeAccountAddress });\n    }, [activeAccountAddress, allAccounts]);\n\n    return { activeAccount, loading, setActiveAccountAddress };\n}","import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport config from 'src/config';\n\nexport const client = new ApolloClient({\n    uri: config.processorUrl,\n    cache: new InMemoryCache()\n});","import { ApolloProvider } from '@apollo/client';\nimport React from 'react';\nimport './App.css';\nimport { Dashboard } from './containers/Dashboard/Dashboard';\nimport { LatestBlockHeightProvider } from './hooks/useLatestBlockHeight';\nimport { PolkadotJsProvider } from './hooks/usePolkadotJs';\nimport { AccountsProvider } from './hooks/useAccounts';\nimport { client } from './lib/apollo';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client} >\n      <PolkadotJsProvider>\n        <LatestBlockHeightProvider>\n          <AccountsProvider>\n            <Dashboard />\n          </AccountsProvider>\n        </LatestBlockHeightProvider>\n      </PolkadotJsProvider>\n    </ApolloProvider>\n  )\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport log, { LogLevelDesc } from 'loglevel'\nimport 'simple-linear-scale';\n\n// <reference types=\"simple-linear-scale.d.ts\">\n\nlet logLevel = (() => {\n  let params = (new URL(document.location as unknown as string)).searchParams;\n  console.log('loglevel', params.get('loglevel') as LogLevelDesc);\n  return params.get('loglevel') as LogLevelDesc;\n})() || 'info'\n\nlog.setLevel(logLevel)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}